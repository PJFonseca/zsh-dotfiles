# Fancy colorful echo messages
function msgout(){
	local color=$1;
	local message=$2;
	if ! [[ $color =~ '^[0-9]$' ]] ; then
		case $(echo -e $color | tr '[:upper:]' '[:lower:]') in
			# black
			header) color=0 ;;
			# red
			error) color=1 ;;
			# green
			success) color=2 ;;
			# yellow
			welcome) color=3 ;;
			# blue
			title) color=4 ;;
			# purple
			info) color=5 ;;
			# cyan
			question) color=6 ;;
			# orange
			warning) color=202 ;;
			# white
			*) color=7 ;;
		esac
	fi
	tput bold;
	tput setaf $color;
	echo '-- '$message;
	tput sgr0;
}

#Clears some dirs
function clean(){
	sudo rm -r ~/$DOWNLOAD_FOLDER/* 2> /dev/null
	sudo rm -r ~/$IMAGES_FOLDER/* 2> /dev/null
	sudo rm -rf ~/.local/share/Trash/info/* 2> /dev/null
	sudo rm -rf ~/.local/share/Trash/files/* 2> /dev/null
}
function update(){
    sudo apt-get update && sudo apt-get clean && sudo apt-get autoremove && sudo apt --fix-broken install && sudo apt-get update && sudo apt-get upgrade && sudo dpkg --configure -a && sudo apt-get install -f && clean && ublock
		#Update GNOME Shell Extensions
		#gnome-shell-extension-installer --yes --update --restart-shell
}
#Update dotfiles
function dotfiles_update(){
  rm -rf ~/.dotfiles
  rm -rf /tmp/dotfiles/
  git clone --recurse-submodules https://github.com/PJFonseca/zsh-dotfiles /tmp/dotfiles
  cp -R /tmp/dotfiles/.zshrc ~/.zshrc
  mkdir ~/.dotfiles
  cp -R /tmp/dotfiles/.dotfiles/. ~/.dotfiles/
  source ~/.zshrc
}
#Update host files to block bad hosts
function ublock(){
	sudo wget -O '/etc/hosts' 'https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn/hosts' &> /dev/null && sync &> /dev/null
}
function idbeaver(){
	cd /tmp/ && wget -P /tmp/ --trust-server-names https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb -O dbeaver-ce_latest_amd64.deb && sudo apt install -y /tmp/dbeaver-ce_latest_amd64.deb
}
function iskype(){
	cd /tmp/ && wget -P /tmp/ --trust-server-names https://go.skype.com/skypeforlinux-64.deb && sudo apt install -y /tmp/skypeforlinux-64.deb
}
function ivscode(){
  cd /tmp/ && wget -P /tmp/ --trust-server-names https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64 -O vscode.deb && sudo apt install -y /tmp/vscode.deb
}
function ilogseq(){
	cd /tmp/ && wget -P /tmp/ https://github.com/logseq/logseq/releases/download/0.5.9/Logseq-linux-x64-0.5.9.AppImage -O logseq.appimage

	sudo chmod +x logseq.appimage

	sudo mkdir /opt/logseq
	sudo mv logseq.appimage /opt/logseq/

	wget -P /tmp/ https://asset.logseq.com/static/img/logo.png -O logseq.png
	sudo mv logseq.png /opt/logseq/logseq.png

	cat << EOF > ~/.local/share/applications/logseq.desktop
	[Desktop Entry]
	Type=Application
	Name=Logseq
	GenericName=logseq
	Comment=logseq
	Categories=Utility;
	Exec=/opt/logseq/logseq.appimage
	Icon=/opt/logseq/logseq.png
	Terminal=false
EOF
}

function myip(){
	myexternalip="$(curl https://ipinfo.io/ip 2>/dev/null)"
	mylocalip="$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | sed -n 1p)"
	msgout warning "External: ${myexternalip}"
	msgout success "Local: ${mylocalip}"
}

#Download stuff from YouTube
function bookdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format m4a --embed-thumbnail --audio-quality 0 $1 -o '$AUDIO_BOOKS_FOLDER/%(artist)s/%(album)s/%(title)s.%(ext)s'
	msgout success "Book downloaded!"
	cd $AUDIO_BOOKS_FOLDER
}
function musicdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format m4a --embed-thumbnail --audio-quality 0 $1 -o '$MUSIC_FOLDER/%(title)s.%(ext)s'
	msgout $MUSIC_FOLDER
}
function videodl(){
	youtube-dl $1 -o '$MUSIC_FOLDER/%(title)s.%(ext)s' -f 'bestvideo[height>=720]+bestaudio/best[height>=720]'
	msgout $MUSIC_FOLDER
}
function playlistdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '$MUSIC_FOLDER/TMP/%(title)s.%(ext)s'
	msgout success "Music downloaded!"
	cd $MUSIC_FOLDER/TMP/
}
#Meteo in CLI
function meteo() {
  local LOCALE=$(echo ${LANG:-en} | cut -c1-2)
  if [ $# -eq 0 ]; then
    local LOCATION=$(curl -s ipinfo.io/loc)
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

function mergevideos(){
	directory=$(pwd)
	rm -R inputs.txt
	rm -R output.${1}
	#Replace spaces from the names to underscores
	for i in *' '* ; do mv "$i" "${i// /_}" ; done
	#Grab the files into an array
	files=$( find . -type f -name "*.${1}" | sort -V )
	#Create a list of inputs
	for i in $files; do
		echo "file '$i'" >> inputs.txt
	done;
	#do the magic
	ffmpeg -f concat -safe 0 -i inputs.txt -c copy output.${1}
}

function ODT2PDF(){
	#Replace spaces from the names to underscores
	for i in *' '* ; do mv "$i" "${i// /_}" ; done
	sudo libreoffice --headless --convert-to pdf *.odt
	sudo pdfunite $(ls *.pdf | sort -n) Book_of_Labs.pdf
	sudo cp Book_of_Labs.pdf ../StudentBundle/
	#sudo rm -R *.pdf
}
function ODP2PDF(){
	#Replace spaces from the names to underscores
	for i in *' '* ; do mv "$i" "${i// /_}" ; done
	sudo libreoffice --headless --convert-to pdf *.odp
	sudo pdfunite $(ls *.pdf | sort -n) Book_of_Slides.pdf
	sudo cp Book_of_Slides.pdf ../StudentBundle/
	#sudo rm -R *.pdf
}

function png2pdf(){
  #!/bin/bash

  # Creation of a PDF file from a sequence of PNG page images.

  # JMCE [https://twitter.com/jmcest ], once upon a time.
  # Take it as public domain. It's a mess, anyway.

  # @@ ALMOST NO ERROR CHECKING YET!

  # Usage
  # =====
  # pdfbind [-0|-1|-2|-3|-4] [-xCOLORS] [-o] OUTPUT.pdf PAGE1.png [PAGE2.png ...]
  #   Create OUTPUT.pdf from page image files PAGE1.png PAGE2.png ...
  #   Page images are lossy compressed using pngquant, and the resulting files
  #   are processed by img2pdf.
  #   If option -N is specified with N in {1,2,3,4}, N least significant bits of
  #   color are truncated per channel.  The default (no options specified) is -4.
  #   If option -0 is specified, no color bit truncation is performed.
  #   Any other options are ignored.
  #   If -x followed by a number of colors (<=256) is specified, that will be the
  #   number of colors in the output image.
  #   If -o is specified, ordered dithering is used instead of Floyd-Steinberg dithering.
  #   If -q is specified, don't delete the converted images.

  my_name=$(basename "$0")
  context="${my_name}"

  function say() { echo "${context}: $*"; }
  function warn() { say "warning: $*"; }
  function error() { say "error: $*"; }
  function error_exit() { [[ $# -ne 0 ]] && error "$*"; exit 64; }

  TRUNCATION="--posterize 4"
  NCOLORS=""
  DITHERING=""
  PURGE="yes"
  while  [[ $1 == -* ]]; do
    option=$1
    shift
    if [[ ${option} =~ ^-([1-4])$ ]]; then
      TRUNCATION="--posterize ${BASH_REMATCH[1]}"
    elif [[ ${option} == -0 ]]; then
      TRUNCATION=""
    elif [[ ${option} =~ ^-x([0-9]+)$ ]]; then
      NCOLORS="${BASH_REMATCH[1]}"
    elif [[ ${option} == -o ]]; then
      DITHERING="--ordered"
    elif [[ ${option} == -q ]]; then
      PURGE="no"
    elif [[ ${option} == -- ]]; then
      # Expect no more options.
      break
    else
      warn "ignoring invalid option ${option}"
    fi
  done

  if [[ $# -eq 0 ]]; then
    error_exit "you did not specify an output file"
  fi
  output_file="$1"
  if [[ -f ${output_file} ]]; then
    error_exit "${output_file}, specified as output file, already exists"
  fi
  shift
  if [[ $# -eq 0 ]]; then
    error_exit "you did not specify page image files"
  fi
  declare -a input_pages converted_pages
  input_pages=("$@")
  converted_pages=("${@/%.png/-quant.png}")

  input_size=$(du -h -c "${input_pages[@]}" | tail -1 | cut -f 1)

  for input_page in "${input_pages[@]}"; do
    page_type=$(file "${input_page}")
    converted_page="${input_page/%.png/-quant.png}"
    quant_out=$(pngquant --verbose --speed 1 ${TRUNCATION} ${NCOLORS} ${DITHERING} --ext '-quant.png' "${input_page}" 2>&1)
    ##echo "${quant_out}"
    if [[ ${quant_out} =~ \
          \.\.\.([0-9]+)\ colors.*\ \(Q=([0-9.,]+)\)[[:space:]]+writing\ ([0-9]+)-color ]]
    then
      num_colors_1=${BASH_REMATCH[1]}
      num_colors_2=${BASH_REMATCH[3]}
      quality=${BASH_REMATCH[2]}
    else
      num_colors_1='??'
      num_colors_2='??'
      quality='??'
    fi
    if [[ ${page_type} =~ "grayscale" ]]; then
      color_type='g'
      # We do this so that img2pdf perceives the converted image as grayscale:
      # indexed PNG files are handled by img2pdf as RGB color images.
      mogrify -type Grayscale "${converted_page}"
      # @@ Note that the output of mogrify can be larger than the original image,
      #    and so can be its contribution to the PDF size, but using
      #    pngcrush or optipng to compress the PNG file will have no effect
      #    on the resulting PDF part.
    else
      color_type='c'
    fi
    echo "${input_page}" \
         " ${color_type} ? ${num_colors_1} ? ${num_colors_2} colors  Q=${quality}"
  done

  img2pdf --engine pikepdf "${converted_pages[@]}" > "${output_file}"
  output_size=$(du -h "${output_file}" | cut -f 1)
  echo "${#input_pages[@]} pages (${input_size}) ? ${output_file} (${output_size})"

  if [[ ${PURGE} == yes ]]; then
    rm "${converted_pages[@]}"
  fi
  evince "${output_file}" >& /dev/null

  # Local Variables:
  # sh-basic-offset: 2
  # sh-indentation: 2
  # fill-column: 79
  # End:

}